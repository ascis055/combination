##############################################################################
# Combinations C(n,k) solution
# Alexandra Stankovich
##############################################################################

##############################################################################
# r0 <- 0
# r1 <- function argument, not preserved by factorial function
# r2 <- temporary register, not preserved by factorial function
# r3 <- n
# r4 <- k
# r5 <- temporary data, used in main function
# r6 <- temporary data, used in main function

# HMMMM pre-defined registers
# r13 Function return value
# r14 Function return address
# r15 Stack pointer

##############################################################################
# read n, read k
# check values, return -1 on error
# calculate n! / (n! * (n - k)!)
# print the result
##############################################################################

##############################################################################
# main
#
0   setn r15, 33	# set stack (stack grows up, stores 1-byte entries)
1   read r3		# read n
2   read r4		# read k
3   jgtzn r3, 7		# don't return error if n > 0

#
# return error
#
4   setn r1, -1		# r1 = -1
5   write r1		# print result
6   halt		# stop the program

7   jgtzn r4, 9		# don't return error if k > 0
8   jumpn 4		# jump to error output

9   copy r1, r3		# r1 = n
10  calln r14, 21	# call factorial
11  copy r5, r13	# save n! in r5
12  copy r1, r4		# r1 = k
13  calln r14, 21	# call factorial
14  copy r6, r13	# save k! in r6
15  sub r1, r3, r4	# r1 = n - k
16  calln r14, 21	# call factorial
17  mul r6, r6, r13	# r6 = n! * (n - k)!
18  div r1, r5, r6	# r1 = n! / (n! * (n - k)!)
19  write r1		# print result
20  halt		# stop the program


##############################################################################
# factorial function
#
21  copy r2, r1		# copy argument to r2
22  addn r1, -1		# subtract 1 from r1
23  jgtzn r1, 26	# if the result is less or equal than 0,
			# return 1, otherwise jump to recursive call
#
# return 1
#
24  setn r13, 1		# set return value 1
25  jumpr r14		# return from function

#
# call factorial recursively, multiply result by argument
#
26  pushr r2, r15	# save register used by function
27  pushr r14, r15	# save return address
28  calln r14, 21	# call factorial, argument - 1 is already in r1
29  popr r14, r15	# restore return address
30  popr r2, r15	# restore register used by function
31  mul r13, r13, r2	# multiply result by the original argument

#
# return from function
#
32  jumpr r14		# return from function

##############################################################################
# stack starts here
